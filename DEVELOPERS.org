#+TITLE: Legal RAG System Developer Guide
#+AUTHOR: DefRecord Team
#+EMAIL: info@defrecord.com
#+DATE: 2025-03-23
#+DESCRIPTION: Guide for developers working on the Legal RAG system

* Developer Guide

This guide provides information for developers working on the Legal RAG system.

** Getting Started

*** Prerequisites

- Python 3.9 or newer
- Hy 0.26.0 or newer
- Emacs for literate programming (highly recommended)
- Git

*** Installation

1. Clone the repository:
   #+begin_src bash
   git clone https://github.com/defrecord/legal-rag-hy.git
   cd legal-rag-hy
   #+end_src

2. Set up a development environment:
   #+begin_src bash
   # Using UV (recommended)
   uv pip install -e ".[dev]"
   
   # Using pip
   pip install -e ".[dev]"
   #+end_src

3. Tangle code from org files:
   #+begin_src bash
   make tangle
   #+end_src

** Development Workflow

*** Literate Programming

This project uses org-mode literate programming. See [[file:docs/DEVELOPERS/org-mode-guide.org][Org-Mode Development Guide]] for detailed instructions.

*** Building

#+begin_src bash
# Tangle code from org files
make tangle

# Run tests
make test

# Run tests with coverage
make coverage
#+end_src

*** Linting and Formatting

#+begin_src bash
# Run linters
make lint

# Apply formatting
make format
#+end_src

*** Documentation

#+begin_src bash
# Generate documentation
make docs

# Generate citation file
make citation
#+end_src

** Project Structure

- =src/legal_rag.org=: Main literate programming file
- =src/legal_rag/=: Generated Hy files
  - =system.hy=: Core RAG implementation
  - =cache.hy=: Embedding cache with TTL
  - =citation.hy=: Citation handling
  - =jurisdiction.hy=: Jurisdiction hierarchy
  - =evaluation.hy=: Response evaluation
  - =utils.hy=: Helper utilities
- =tests/=: Test files
- =docs/=: Documentation
- =examples/=: Usage examples

** Key Components

*** Core System

The core RAG implementation (=system.hy=) provides:

- Vector search with jurisdiction-aware boosting
- Context formation for LLMs
- Answer generation with citations
- Evaluation of response quality

*** Embedding Cache

The caching system (=cache.hy=) provides:

- TTL-based expiration
- Version tracking
- Persistent storage
- Memory management

*** Jurisdiction Handling

The jurisdiction system (=jurisdiction.hy=) implements:

- Legal jurisdiction hierarchy
- Precedential boost calculations
- Citation network analysis

** Git Workflow

*** Commit Guidelines

1. Follow conventional commits format:
   #+begin_example
   <type>(<scope>): <description>
   #+end_example

2. Use the git-commit-with-trailers script:
   #+begin_src bash
   ./scripts/git-commit-with-trailers.sh "feat(component): your commit message"
   #+end_src

*** Pull Requests

1. Create a feature branch
2. Implement your changes
3. Run tests and linters
4. Submit a PR with clear description

** Detailed Documentation

For more detailed information, see:

- [[file:CONTRIBUTING.org][Contributing Guide]]
- [[file:docs/DEVELOPERS/org-mode-guide.org][Org-Mode Development Guide]]
- [[file:docs/architecture.org][System Architecture]]
- [[file:docs/jurisdiction.org][Jurisdiction Handling]]