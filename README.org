#+TITLE: Legal RAG System with Hy
#+AUTHOR: DefRecord Team
#+EMAIL: info@defrecord.com
#+DATE: 2025-03-23
#+DESCRIPTION: A jurisdiction-aware Retrieval-Augmented Generation system for legal research built with Hy and org-mode literate programming

[[https://github.com/defrecord/legal-rag-hy/actions/workflows/ci.yml/badge.svg][https://github.com/defrecord/legal-rag-hy/actions/workflows/ci.yml/badge.svg]]
[[https://img.shields.io/github/v/release/defrecord/legal-rag-hy][https://img.shields.io/github/v/release/defrecord/legal-rag-hy]]
[[https://img.shields.io/badge/python-3.9%20%7C%203.10%20%7C%203.11-blue.svg][https://img.shields.io/badge/python-3.9%20%7C%203.10%20%7C%203.11-blue.svg]]
[[https://img.shields.io/badge/license-MIT-green.svg][https://img.shields.io/badge/license-MIT-green.svg]]

A jurisdiction-aware Retrieval-Augmented Generation (RAG) system for legal research, built with Hy and org-mode literate programming.

** Overview

The Legal RAG System provides an efficient, accurate, and jurisdiction-aware approach to legal research by:

- Retrieving relevant legal documents from a vector database based on queries
- Enhancing document relevance with jurisdiction-aware scoring
- Generating accurate, well-cited answers using LLMs
- Providing an efficient embedding cache with TTL to reduce API costs
- Supporting multiple document types (cases, statutes, regulations)

** Features

- *Jurisdiction-Aware Retrieval*: Boosts relevance based on jurisdictional hierarchy
- *Citation Network Analysis*: Weights documents by citation relationships
- *Embedding Cache*: TTL-based caching with version tracking
- *Failure Handling*: Graceful degradation with fallbacks
- *Evaluation Framework*: Comprehensive metrics for RAG performance
- *Optimized Vector Search*: Efficient similarity search with FAISS

** Installation

#+BEGIN_SRC bash
# Clone the repository
git clone https://github.com/defrecord/legal-rag-hy.git
cd legal-rag-hy

# Install dependencies
pip install -e .
#+END_SRC

** Usage

Basic usage example:

#+BEGIN_SRC hy
(import [legal-rag.system [LegalRAGSystem]])

;; Initialize the system
(setv rag-system (LegalRAGSystem 
                   :embedding-model "text-embedding-3-large"
                   :llm-model "gpt-4o"
                   :jurisdiction "CA-9"))

;; Query the system
(setv query "What constitutes fair use under copyright law?")
(setv response (rag-system.query query))

;; Display the response with citations
(print response.answer)
(print "\nCitations:")
(for [citation response.citations]
  (print citation))
#+END_SRC

** Architecture

The system is built with a modular architecture:

1. *Query Processing*: Pre-processes legal queries for optimal retrieval
2. *Vector Search*: Jurisdiction-aware document retrieval with FAISS
3. *Context Formation*: Structures retrieved documents for the LLM
4. *Answer Generation*: Produces accurate, well-cited responses
5. *Embedding Cache*: Optimizes performance and reduces API costs
6. *Evaluation Module*: Assesses system performance with multiple metrics

** Documentation

Comprehensive documentation with full literate programming support:

- [[file:docs/installation.org][Installation Guide]]
- [[file:docs/usage.org][Usage Guide]]
- [[file:docs/architecture.org][System Architecture]]
- [[file:docs/evaluation.org][Evaluation Framework]]
- [[file:docs/jurisdiction.org][Jurisdiction Handling]]
- [[file:docs/deployment.org][Production Deployment Guide]]

Generate HTML documentation:
#+begin_src bash
make docs
#+end_src

** Examples

Interactive examples with org-mode tangle/detangle support:

- [[file:examples/legal_rag_demo.ipynb][Legal RAG Demo Notebook]] - Demonstrates the system with visualizations

Run the examples:
#+begin_src bash
make notebook
#+end_src

** Contributing

Contributions are welcome! Please read our [[file:CONTRIBUTING.org][Contributing Guide]] for details on our code of conduct and the process for submitting pull requests.

** Literate Programming

This project uses org-mode literate programming to maintain code and documentation as a unified whole:

- All implementation is in org files that tangle to Hy code
- Documentation is generated from the same source
- Full round-trip editing support

To tangle code from org files:
#+begin_src bash
make tangle
#+end_src

** License

This project is licensed under the MIT License - see the [[file:LICENSE][LICENSE]] file for details.

** Acknowledgments

- The Hy community for the excellent Lisp dialect
- FAISS developers for the efficient similarity search
- LangChain contributors for inspiration
- DefRecord team for domain expertise

** Contributors

- [[https://github.com/kkumar30][Kushagra Kumar]] - Lead Developer, ML Systems
- [[https://github.com/jwalsh][Jason Walsh]] - Project Lead, System Architecture
- [[https://github.com/daidaitaotao][Xianglong Tao]] - Developer, Testing Infrastructure
- [[https://github.com/aygp-dr][Aidan Pace]] - Developer, Infrastructure Integration
- [[https://github.com/seanjensengrey][Sean Jensen-Grey]] - Research Advisor

** Citation

If you use this system in your research, please cite:

#+BEGIN_SRC
Kumar, K., Walsh, J., Tao, X., & Pace, A. (2025). Legal RAG: A Jurisdiction-Aware Retrieval-Augmented Generation System for Legal Research. In Proceedings of LITCon 2025.
#+END_SRC